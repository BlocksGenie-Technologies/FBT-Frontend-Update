(()=>{const t="0x7A562AaC8903cf4F50faf26AC301D5Ed3e65dAe6",e=[{inputs:[{internalType:"address",name:"_tokenAddress",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"uint256[]",name:"timestamps",type:"uint256[]"},{internalType:"uint256",name:"initialBalance",type:"uint256"}],name:"calculateShare",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256[]",name:"timestamp",type:"uint256[]"},{internalType:"uint256[]",name:"amount",type:"uint256[]"},{internalType:"uint256",name:"last24HourBalance",type:"uint256"}],internalType:"struct RevenueDistributor.UserDetails[]",name:"_userDetails",type:"tuple[]"}],name:"distribute",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"getLastDistributionTime",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"lastDistributionTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"pendingRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"revenuePeriod",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"rewardClaimable",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_tokenAddress",type:"address"}],name:"setTokenAddress",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"token",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalRewardDistributed",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],n=document.getElementById("btn-connect"),a=document.getElementById("btn-connect1"),i=document.getElementById("t_reward"),o=document.getElementById("pending_reward");let s,r,c;function u(t){const e=Math.floor(t),n=Math.floor(e%86400/3600),a=Math.floor(e%86400%3600/60),i=e%60;return`${n.toString().padStart(2,"0")}:${a.toString().padStart(2,"0")}:${i.toString().padStart(2,"0")}`}let l=async()=>{if(r){const n=new r.eth.Contract(e,t),a=await n.methods.totalRewardDistributed().call();i.textContent=Number(r.utils.fromWei(a,"ether")).toFixed(2),console.log("accumulatedRewards",a)}},d=async()=>{if(r){const n=new r.eth.Contract(e,t),a=await r.eth.getAccounts(),i=await n.methods.pendingRewards(a[0]).call();o.textContent=Number(r.utils.fromWei(i,"ether")).toFixed(2)}},p=async()=>{const n=new(new Web3(new Web3.providers.HttpProvider("https://mainnet.infura.io/v3/09046699d3b24685b819c3d6fd021a40")).eth.Contract)(e,t),a=await n.methods.getLastDistributionTime().call(),i=Number(a)+86400-Math.floor(Date.now()/1e3);document.getElementById("countDown").textContent=u(i),document.getElementById("countDown1").textContent=u(i)};p();let y=async()=>{try{if(r){const n=await r.eth.getAccounts(),a=new r.eth.Contract(e,t);await a.methods.claim().send({from:n[0]})}else console.log("web3 instance not found.")}catch(t){console.error("Error claiming rewards:",t.message)}};setInterval((async()=>{await l(),await d(),p()}),1e3);const m=window.Web3Modal.default,w=window.WalletConnectProvider.default;let b;async function v(){r=new Web3(s),s.isConnected()?(n.textContent="Disconnect",a.textContent="Claim",n.removeEventListener("click",f),n.addEventListener("click",g),a.removeEventListener("click",f),a.addEventListener("click",y)):(n.textContent="Connect Wallet",a.textContent="Connect Wallet",n.removeEventListener("click",g),n.addEventListener("click",f),a.removeEventListener("click",y),a.addEventListener("click",f)),await d(),await l(),console.log("Web3 instance is",r);const t=await r.eth.getAccounts();console.log("Got accounts",t),c=t[0]}async function f(t){try{s=await b.connect()}catch(t){return void console.log("Could not get a wallet connection",t)}s.on("accountsChanged",(t=>{v()})),s.on("chainChanged",(t=>{v()})),s.on("networkChanged",(t=>{v()})),v()}async function g(){await b.clearCachedProvider(),s=null,c=null,n.textContent="Connect Wallet",a.textContent="Connect Wallet",n.removeEventListener("click",g),n.addEventListener("click",f),a.removeEventListener("click",y),a.addEventListener("click",f),await d(),await l()}window.EvmChains,window.addEventListener("load",(async()=>{console.log("Initializing example"),console.log("WalletConnectProvider is",w),b=new m({cacheProvider:!1,providerOptions:{walletconnect:{package:w,options:{infuraId:"8043bb2cf99347b1bfadfb233c5325c0"}}}}),document.querySelector("#btn-connect").addEventListener("click",f),document.querySelector("#btn-connect1").addEventListener("click",f)}))})();