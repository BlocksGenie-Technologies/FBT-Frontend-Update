(()=>{const e="0x54e7CeE9B608bdE62f9cf385d05725a2424592D1",t=[{inputs:[{internalType:"address",name:"_manager",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[{internalType:"address[]",name:"a",type:"address[]"},{internalType:"bool",name:"status",type:"bool"}],name:"blacklist",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"reward",type:"uint256"}],internalType:"struct RevenueDistributor.UserDetails[]",name:"_userDetails",type:"tuple[]"}],name:"distribute",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"distributedEth",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getLastDistributionTime",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"lastDistributionTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"manager",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"pendingRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"rewardClaimable",outputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"reward",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_manager",type:"address"}],name:"setManagerAddress",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],n=document.getElementById("btn-connect"),a=document.getElementById("btn-connect1"),i=document.getElementById("t_reward"),s=document.getElementById("pending_reward");let r,o;function d(e){const t=Math.floor(e),n=Math.floor(t%86400/3600),a=Math.floor(t%86400%3600/60),i=t%60;return`${n.toString().padStart(2,"0")}:${a.toString().padStart(2,"0")}:${i.toString().padStart(2,"0")}`}new ethers.providers.JsonRpcProvider("https://eth.llamarpc.com");let c=async()=>{if(o){const n=new o.eth.Contract(t,e),a=await n.methods.distributedEth().call();i.textContent=Number(o.utils.fromWei(a,"ether")).toFixed(5)}},u=async()=>{if(o){const n=new o.eth.Contract(t,e),a=await o.eth.getAccounts(),i=await n.methods.pendingRewards(a[0]).call();s.textContent=Number(o.utils.fromWei(i,"ether")).toFixed(5)}},l=async()=>{const n=new(new Web3(new Web3.providers.HttpProvider("https://mainnet.infura.io/v3/09046699d3b24685b819c3d6fd021a40")).eth.Contract)(t,e),a=await n.methods.getLastDistributionTime().call(),i=Number(a)+86400,s=Math.floor(Date.now()/1e3),r=0==Number(a)?0:i-s;document.getElementById("countDown").textContent=d(r),document.getElementById("countDown1").textContent=d(r)};l();let p=async()=>{try{if(o){const n=new ethers.providers.Web3Provider(r).getSigner(),a=new ethers.Contract(e,t,n);await a.claim()}else console.log("web3 instance not found.")}catch(e){console.error("Error claiming rewards:",e.message)}};setInterval((async()=>{await c(),await u(),l()}),1e3);const y=window.Web3Modal.default,m=window.WalletConnectProvider.default;let w;async function b(){o=new Web3(r),r.isConnected()?(n.textContent="Disconnect",a.textContent="Claim",n.removeEventListener("click",v),n.addEventListener("click",f),a.removeEventListener("click",v),a.addEventListener("click",p)):(n.textContent="Connect Wallet",a.textContent="Connect Wallet",n.removeEventListener("click",f),n.addEventListener("click",v),a.removeEventListener("click",p),a.addEventListener("click",v)),await u(),await c()}async function v(e){try{r=await w.connect()}catch(e){return void console.log("Could not get a wallet connection",e)}r.on("accountsChanged",(e=>{b()})),r.on("chainChanged",(e=>{b()})),r.on("networkChanged",(e=>{b()})),b()}async function f(){await w.clearCachedProvider(),r=null,n.textContent="Connect Wallet",a.textContent="Connect Wallet",n.removeEventListener("click",f),n.addEventListener("click",v),a.removeEventListener("click",p),a.addEventListener("click",v),await u(),await c()}window.EvmChains,window.addEventListener("load",(async()=>{w=new y({cacheProvider:!1,providerOptions:{walletconnect:{package:m,options:{infuraId:"8043bb2cf99347b1bfadfb233c5325c0"}}}}),document.querySelector("#btn-connect").addEventListener("click",v),document.querySelector("#btn-connect1").addEventListener("click",v)}))})();